{"version":3,"sources":["utils/FirebaseConfig.ts","utils/FirebaseUtils.ts","components/login/Login.tsx","components/event_edit/EventEdit.tsx","components/modal/Modal.tsx","components/qr/QR.tsx","components/event_view/EventView.tsx","components/events_record/EventsRecord.tsx","App.tsx","reportWebVitals.js","serviceWorker.ts","index.js"],"names":["firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","FirebaseUtils","getFirebaseApp","window","firebase","apps","length","initializeApp","initialize_auth","callback","app","auth","setPersistence","Auth","Persistence","SESSION","onAuthStateChanged","user","getUser","currentUser","displayName","email","isValidTeamMember","a","getPageData","page","output","db","firestore","collection","doc","get","data","login","onFail","provider","GoogleAuthProvider","signInWithPopup","then","result","catch","error","alert","logout","signOut","saveChanges","currentPage","page_data","set","Login","props","state","onLogin","setState","isLoggedIn","showMsg","msg","isValidUser","onLoginSuccess","showMessage","message","onLogOut","this","style","display","flexDirection","justifyContent","alignItems","height","width","className","alt","src","homepage","label","onClick","React","Component","EventEdit","onSubmit","name","date","url","eventkey","defaultId","defaultName","defaultDate","defaultUrl","defaultKey","id","rows","defaultValue","isReadonly","border","readOnly","onChange","event","target","value","buttonText","Modal","showHideClassName","showModal","children","QR","time","Date","toLocaleString","isLoading","qrvalue","worker","Worker","console","log","innerHeight","postMessage","Url","formUrl","Name","eventName","Key","onmessage","$event","terminate","level","marginLeft","callbackID","EventView","toggleModalState","showInfo","isEditable","showQR","toggleModalEditState","onEdit","eventId","toggleShowQR","eventKey","color","size","EventsRecord","onCreate","newEvent","events","unshift","createNew","index","newEvents","map","val","JSON","parse","stringify","getRandomKey","uuidv4","getNewId","ts","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","toggleCreateNew","body","details","alignSelf","marginRight","marginTop","App","onLoggedIn","isValidUserLoggedIn","onLoggedOut","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mdAUeA,G,YAVQ,CACnBC,OAAQ,0CACRC,WAAY,+BACZC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBCFNC,EAAb,kCAAaA,EAEMC,eAAiB,WAC5B,MAAqB,qBAAXC,OACCC,IAASC,KAAKC,OAASF,IAASC,KAAK,GAAKD,IAASG,cAAcd,GAErE,MANFQ,EASKO,gBAAkB,SAACC,GAC7B,IAAMC,EAAMT,EAAcC,iBACvB,OAAHQ,QAAG,IAAHA,KAAKC,OAAOC,eAAeR,IAASO,KAAKE,KAAKC,YAAYC,SACvD,OAAHL,QAAG,IAAHA,KAAKC,OAAOK,oBAAmB,SAACC,GACzBA,GACCR,QAdHR,EAmBKiB,QAAU,WAAO,IAAD,IACpBR,EAAMT,EAAcC,iBAC1B,MAAO,CAAC,YAAQQ,QAAR,IAAQA,GAAR,UAAQA,EAAKC,OAAOQ,mBAApB,aAAQ,EAAyBC,YAAa,aAASV,QAAT,IAASA,GAAT,UAASA,EAAKC,OAAOQ,mBAArB,aAAS,EAAyBE,QArBnFpB,EAwBKqB,kB,sBAAoB,sBAAAC,EAAA,+EAELtB,EAAcuB,YAAY,eAFrB,mBAGZ,GAHY,0CAIf,GAJe,iFAQnB,GARmB,kCAUvB,GAVuB,yDAxBzBvB,EAqCKuB,Y,uCAAc,WAAOC,GAAP,qBAAAF,EAAA,6DACpBG,EAAc,GACZhB,EAAMT,EAAcC,iBACpByB,EAHkB,OAGbjB,QAHa,IAGbA,OAHa,EAGbA,EAAKkB,YAAYC,WAAW,iBAHf,gBAILF,QAJK,IAILA,OAJK,EAILA,EAAIG,IAAIL,GAAMM,MAJT,cAIlBC,EAJkB,OAKxBN,EAAUM,EAAQA,EAAKA,OAAS,GALR,kBAMjBN,GANiB,2C,sDArCnBzB,EA8CKgC,MAAQ,SAACxB,EAAmByB,GACtC,IAAMxB,EAAMT,EAAcC,iBACtBiC,EAAW,IAAI/B,IAASO,KAAKyB,mBAC9B,OAAH1B,QAAG,IAAHA,KAAKC,OAAO0B,gBAAgBF,GAAUG,MAAK,SAASC,GAChD9B,OACD+B,OAAM,SAASC,GACdC,MAAMD,GACNP,QArDCjC,EAyDK0C,OAAS,SAAClC,GACpB,IAAMC,EAAMT,EAAcC,iBACvB,OAAHQ,QAAG,IAAHA,KAAKC,OAAOiC,UAAUN,MAAK,SAASC,GAChC9B,OACD+B,OAAM,SAASC,GAAOC,MAAM,gCA7D1BzC,EAgEK4C,YAAc,SAACC,EAAoBC,GAC7C,IAAMrC,EAAMT,EAAcC,iBACvB,OAAHQ,QAAG,IAAHA,KAAKkB,YAAYC,WAAW,iBAAiBC,IAAIgB,GAAaE,IAAID,GAAWT,MAAK,SAASC,GACvFG,MAAM,gDACPF,OAAM,SAASC,GACdC,MAAM,4K,yBC4BHO,E,kDAnFX,WAAYC,EAAmBC,GAAmB,IAAD,8BAC7C,cAAMD,EAAMC,IAUhBC,QAXiD,sBAWvC,4BAAA7B,EAAA,6DACAN,EAAOhB,EAAciB,UAAUG,MACrC,EAAKgC,SAAS,CACVC,YAAY,EACZC,SAAS,EACTC,IAAK,kBAAoBvC,EAAO,uBAL9B,SAOehB,EAAcqB,oBAP7B,eASF,EAAK+B,SAAS,CACVI,aAAa,EACbF,SAAS,EACTC,IAAK,mDAET,EAAKN,MAAMQ,kBAGX,EAAKC,YAAY,iDAjBf,2CAXuC,EAsCjDA,YAAc,SAACC,GACX,EAAKP,SAAS,CACVE,SAAS,EACTC,IAAKI,KAzCoC,EA6CjDjB,OA7CiD,sBA6CxC,sBAAApB,EAAA,sDACL,EAAKoC,YAAY,kBACjB1D,EAAc0C,QAAO,WACjB,EAAKU,SAAS,CACVC,YAAY,EACZG,aAAa,EACbF,SAAS,EACTC,IAAK,gBAET,EAAKN,MAAMW,cATV,2CA7CwC,EA0DjD5B,MA1DiD,sBA0DzC,sBAAAV,EAAA,sDACJtB,EAAcgC,MAAd,sBACI,sBAAAV,EAAA,sDACI,EAAK6B,UADT,4CAGA,WACI,EAAKO,YAAY,iEANrB,2CAxDJ1D,EAAcO,gBAAgB,EAAK4C,SACnC,EAAKD,MAAQ,CACTG,YAAY,EACZG,aAAa,EACbF,SAAS,EACTC,IAAK,0BAA4BvD,EAAciB,UAAUG,MAAQ,0CAPxB,E,4FAgCjD,sBAAAE,EAAA,sDACOuC,KAAKX,MAAMG,aAAeQ,KAAKX,MAAMM,aACpCK,KAAKV,UAFb,gD,0EAqCA,WACI,OACI,qBAAKW,MAAO,CAACC,QAAQ,OAAQC,cAAc,SAAUC,eAAe,SAAUC,WAAW,SAASC,OAAO,QAASC,MAAM,QAAxH,SACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,gBAAgBC,IAAKC,IAAS,iBAAkBV,MAAO,CAACM,MAAO,OACxE,mBAAGC,UAAU,aAAb,0BACCR,KAAKX,MAAMG,WAAa,cAAC,IAAD,CAAcoB,MAAM,UAAUC,QAASb,KAAKnB,SAAY,cAAC,IAAD,CAAcgC,QAASb,KAAK7B,QAC5G6B,KAAKX,MAAMI,QAAU,mBAAGe,UAAU,gBAAb,SAA8BR,KAAKX,MAAMK,MAAW,c,GA7E1EoB,IAAMC,WCgEXC,G,wDA3DX,WAAY5B,EAAuBC,GAAuB,IAAD,8BACrD,cAAMD,EAAOC,IAUjB4B,SAAW,WACiB,KAApB,EAAK5B,MAAM6B,MAAmC,KAApB,EAAK7B,MAAM8B,MAAkC,KAAnB,EAAK9B,MAAM+B,KAAsC,KAAxB,EAAK/B,MAAMgC,UACxF,EAAK9B,SAAS,CACVE,SAAS,IAEb,EAAKL,MAAM6B,SAAS,EAAK5B,MAAM6B,KAAM,EAAK7B,MAAM8B,KAAM,EAAK9B,MAAM+B,IAAK,EAAK/B,MAAMgC,SAAU,EAAKjC,MAAMkC,YAGtG,EAAK/B,SAAS,CACVE,SAAS,KAlBjB,EAAKJ,MAAQ,CACT6B,KAAM,EAAK9B,MAAMmC,YACjBJ,KAAM,EAAK/B,MAAMoC,YACjBJ,IAAK,EAAKhC,MAAMqC,WAChBJ,SAAU,EAAKjC,MAAMsC,WACrBjC,SAAS,GAPwC,E,0CAyBzD,WAAS,IAAD,OACJ,OACI,sBAAKe,UAAU,iBAAiBmB,GAAI3B,KAAKZ,MAAMsC,WAA/C,UACI,qBAAKlB,UAAU,sBAAf,yBACA,0BAAUmB,GAAG,YAAYnB,UAAU,sBAC/BoB,KAAM,EAAGC,aAAc7B,KAAKZ,MAAMmC,YAClCtB,MAAOD,KAAKZ,MAAM0C,WAAa,CAACC,OAAO,sBAAsB,CAACA,OAAO,kBACrEC,SAAUhC,KAAKZ,MAAM0C,WACrBG,SAAU,SAACC,GAAD,OAAW,EAAK3C,SAAS,CAAC2B,KAAMgB,EAAMC,OAAOC,WAC3D,qBAAK5B,UAAU,sBAAf,yBACA,0BAAUmB,GAAG,YAAYnB,UAAU,sBAC/BoB,KAAM,EAAGC,aAAc7B,KAAKZ,MAAMoC,YAClCvB,MAAOD,KAAKZ,MAAM0C,WAAa,CAACC,OAAO,sBAAsB,CAACA,OAAO,kBACrEC,SAAUhC,KAAKZ,MAAM0C,WACrBG,SAAU,SAACC,GAAD,OAAW,EAAK3C,SAAS,CAAC4B,KAAMe,EAAMC,OAAOC,WAC3D,qBAAK5B,UAAU,sBAAf,wBACA,0BAAUmB,GAAG,WAAWnB,UAAU,sBAC9BoB,KAAM,EAAGC,aAAc7B,KAAKZ,MAAMqC,WAClCxB,MAAOD,KAAKZ,MAAM0C,WAAa,CAACC,OAAO,sBAAsB,CAACA,OAAO,kBACrEC,SAAUhC,KAAKZ,MAAM0C,WACrBG,SAAU,SAACC,GAAD,OAAW,EAAK3C,SAAS,CAAC6B,IAAKc,EAAMC,OAAOC,WAC1D,qBAAK5B,UAAU,sBAAf,uBACA,uBAAOmB,GAAG,WAAWnB,UAAU,sBAC3BqB,aAAc7B,KAAKZ,MAAMkC,UACzBrB,MAAOD,KAAKZ,MAAM0C,WAAa,CAACC,OAAO,sBAAsB,CAACA,OAAO,kBACrEC,UAAU,EACVC,SAAU,gBACZjC,KAAKZ,MAAM0C,YAAc9B,KAAKX,MAAMI,QAAU,qBAAKe,UAAU,oBAAf,sCAAmE,KAClHR,KAAKZ,MAAM0C,WAAa,KAAO,qBAAKtB,UAAU,kBAAkBK,QAASb,KAAKiB,SAA/C,SAA0DjB,KAAKZ,MAAMiD,oB,GAtD7FvB,IAAMC,YCDfuB,G,kKAZX,WACI,IAAMC,EAAoBvC,KAAKZ,MAAMoD,UAAY,sBAAwB,qBACzE,OACI,qBAAKhC,UAAW+B,EAAhB,SACI,yBAAS/B,UAAU,aAAnB,SACKR,KAAKZ,MAAMqD,iB,GAPZ3B,IAAMC,Y,gCCWpB2B,G,wDAEF,WAAYtD,EAAgBC,GAAgB,IAAD,8BACvC,cAAMD,EAAOC,IACRA,MAAQ,CACTsD,MAAM,IAAIC,MAAOC,iBACjBC,WAAW,EACXC,QAAS,GACTC,OAAQ,IAAIC,OAAO,kBANgB,E,4FAU3C,iCAAAxF,EAAA,sDACIyF,QAAQC,IAAI9G,OAAO+G,aACnBpD,KAAKX,MAAM2D,OAAOK,YAAY,CAC1B3D,IAAK,OACL4D,IAAKtD,KAAKZ,MAAMmE,QAChBC,KAAMxD,KAAKZ,MAAMqE,UACjBC,IAAK1D,KAAKZ,MAAMiC,WAEpBrB,KAAKX,MAAM2D,OAAOW,UAAY,SAACC,GACvBA,GAAUA,EAAO1F,MACjB,EAAKqB,SAAS,CACVuD,WAAW,EACXC,QAASa,EAAO1F,KAChByE,MAAM,IAAIC,MAAOC,oBAbjC,gD,+HAmBA,sBAAApF,EAAA,sDACIuC,KAAKX,MAAM2D,OAAOK,YAAY,CAC1B3D,IAAK,SAETM,KAAKX,MAAM2D,OAAOa,YAJtB,gD,0EAOA,WACI,OACI,sBAAKrD,UAAU,cAAf,UACI,qBAAKC,IAAI,gBAAgBD,UAAU,cAAcP,MAAO,CAACM,MAAO,KAAMG,IAAKC,IAAS,qBACpF,qBAAKH,UAAU,YAAf,SAA4B,UAAYR,KAAKZ,MAAMqE,YACnD,sBAAKjD,UAAU,SAAf,UACKR,KAAKX,MAAMyD,UAAY,KAAO,cAAC,SAAD,CAC3BgB,MAAO,IAAKtD,UAAU,YACtB4B,MAAOpC,KAAKX,MAAM0D,UAEtB,qBAAKvC,UAAU,YAAf,SACI,qBAAKC,IAAI,gBAAgBR,MAAO,CAAEM,MAAM,OAAQwD,WAAY,IAAKrD,IAAKC,IAAS,wBAGtFX,KAAKX,MAAMyD,UAAY,qBAAKtC,UAAU,YAAf,wBAA8C,KACtE,mBAAGA,UAAU,YAAb,SAA0B,kBAAoBR,KAAKX,MAAMsD,c,GArDxD7B,IAAMC,YAAjB2B,EACKsB,gB,EA0DItB,QCgBAuB,E,kDArEX,WAAY7E,EAAmBC,GAAmB,IAAD,8BAC7C,cAAMD,EAAMC,IAQhB6E,iBAAmB,WACf,EAAK3E,SAAS,CACV4E,UAAW,EAAK9E,MAAM8E,SACtBC,YAAY,EACZC,QAAQ,KAbiC,EAiBjDC,qBAAuB,WACnB,EAAK/E,SAAS,CACV6E,YAAa,EAAK/E,MAAM+E,cAnBiB,EAuBjDG,OAAS,SAACrD,EAAcC,EAAcC,EAAaC,EAAkBmD,GACjE,EAAKpF,MAAMmF,OAAOrD,EAAMC,EAAMC,EAAKC,EAAUmD,GAC7C,EAAKN,oBAzBwC,EA4BjDO,aAAe,WACXvB,QAAQC,IAAI,YACZ,EAAK5D,SAAS,CACV8E,QAAS,EAAKhF,MAAMgF,UA7BxB,EAAKhF,MAAQ,CACT8E,UAAU,EACVC,YAAY,EACZC,QAAQ,GALiC,E,0CAmCjD,WACI,OACI,sBAAK1C,GAAI3B,KAAKZ,MAAMsF,SAApB,UACI,eAAC,EAAD,CAAOlC,UAAWxC,KAAKX,MAAM8E,SAA7B,UACI,sBAAK3D,UAAU,sBAAf,UACI,cAAC,IAAD,CAAUmE,MAAM,UAAUC,KAAM,GAAI/D,QAASb,KAAKkE,mBACjDlE,KAAKX,MAAM+E,WAAY,cAAC,IAAD,CAAaO,MAAM,WAAWC,KAAM,GAAI/D,QAASb,KAAKsE,uBAA0B,QAE5G,cAAC,EAAD,CAAoE/C,YAAavB,KAAKZ,MAAM8B,KACxFM,YAAaxB,KAAKZ,MAAM+B,KAAMM,WAAYzB,KAAKZ,MAAMgC,IAAKM,WAAY1B,KAAKZ,MAAMsF,SACjFpD,UAAatB,KAAKZ,MAAMoF,QAASvD,SAAUjB,KAAKuE,OAAQlC,WAAW,OACnEP,YAAa9B,KAAKX,MAAM+E,YAHZpE,KAAKZ,MAAMgC,IAAIpB,KAAKZ,MAAM8B,KAAKlB,KAAKZ,MAAMsF,UAKzD1E,KAAKX,MAAM+E,WAAa,KAAO,sBAAK5D,UAAU,qBAAf,UAC5B,qBAAKA,UAAU,kBAAkBK,QAASb,KAAKsE,qBAA/C,kBACA,qBAAK9D,UAAU,kBAAkBK,QAASb,KAAKyE,aAA/C,2BAGR,cAAC,EAAD,CAAOjC,UAAWxC,KAAKX,MAAMgF,OAA7B,SACI,sBAAK7D,UAAU,iBAAf,UACI,cAAC,IAAD,CAAUA,UAAU,mBAAmBoE,KAAM,GAAID,MAAM,UAAU9D,QAASb,KAAKkE,mBAC/E,cAAC,EAAD,CAA6DT,UAAWzD,KAAKZ,MAAM8B,KAAMqC,QAASvD,KAAKZ,MAAMgC,IAAKC,SAAUrB,KAAKZ,MAAMsF,UAA9H1E,KAAKZ,MAAMsF,SAAS1E,KAAKZ,MAAM8B,KAAKlB,KAAKZ,MAAMgC,UAIhE,sBAAKZ,UAAU,eAAeK,QAASb,KAAKkE,iBAA5C,UACI,mBAAG1D,UAAU,iBAAiBK,QAASb,KAAKkE,iBAA5C,SAA+DlE,KAAKZ,MAAM8B,OAC1E,mBAAGV,UAAU,gBAAgBK,QAASb,KAAKkE,iBAA3C,SAA8DlE,KAAKZ,MAAM+B,iB,GA/DrEL,IAAMC,W,gBC0Gf8D,E,kDAtGX,WAAYzF,EAA0BC,GAA0B,IAAD,8BAC3D,cAAMD,EAAOC,IAgBjByF,SAAW,SAAC5D,EAAcC,EAAcC,EAAaC,EAAkBmD,GACnE,IAAMO,EAAuB,CACzB7D,KAAMA,EACNC,KAAMA,EACNC,IAAKA,EACLC,SAAUA,EACVmD,QAASA,GAEb,EAAKnF,MAAM2F,OAAOC,QAAQF,GAC1B5I,EAAc4C,YAAY,SAAS,CAAC,QAAW,EAAKM,MAAM2F,SAC1D,EAAKzF,SAAS,CACV2F,WAAW,KA5B4C,EAgC/DX,OAAS,SAACY,EAAejE,EAAcC,EAAcC,EAAaC,EAAkBmD,GAChF,IAAMO,EAAuB,CACzB7D,OACAC,OACAC,MACAC,WACAmD,WAEEY,EAAY,EAAK/F,MAAM2F,OAAOK,KAAI,SAACC,GAAD,OAASC,KAAKC,MAAMD,KAAKE,UAAUH,OAC3EF,EAAUD,GAASJ,EACnB,EAAKxF,SAAS,CACVyF,OAAQI,IAEZjJ,EAAc4C,YAAY,SAAS,CAAC,QAAWqG,KA7CY,EAgD/DM,aAAe,WACX,OAAOC,eAjDoD,EAoD/DC,SAAW,WACP,IAAIC,EAAK,IAAIjD,KAEb,OAAOiD,EAAGC,UAAY,IADP,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAC/CD,EAAGE,YAAc,IAAMF,EAAGG,cAAgB,IAAMH,EAAGI,WAAa,IAAMJ,EAAGK,aAAe,IAAML,EAAGM,cAvDzE,EA0D/DC,gBAAkB,WACd,EAAK7G,SAAS,CACV2F,WAAY,EAAK7F,MAAM6F,aA1D3B,EAAK7F,MAAQ,CACT2F,OAAQ,GACRlC,WAAW,EACXoC,WAAW,GAL4C,E,4FAS/D,4BAAAzH,EAAA,sEACuBtB,EAAcuB,YAAY,UADjD,OACU2I,EADV,OAEIrG,KAAKT,SAAS,CACVyF,OAAQqB,EAAKC,QACbxD,WAAW,IAJnB,gD,0EAuDA,WAAS,IAAD,OACJ,OACI,sBAAKtC,UAAU,mBAAf,UACI,cAAC,EAAD,CAAOgC,UAAWxC,KAAKX,MAAM6F,UAA7B,SACI,sBAAK1E,UAAU,wBAAf,UACI,cAAC,IAAD,CAAUmE,MAAM,UAAUC,KAAM,GAAI3E,MAAO,CAACsG,UAAU,WAAYC,YAAY,OAAQC,UAAU,OAAQ5F,QAASb,KAAKoG,kBACtH,cAAC,EAAD,CAAqC5E,YAAY,GAAGD,YAAY,GAC5DE,WAAW,GAAGC,WAAY1B,KAAK0F,eAAgBpE,UAAWtB,KAAK4F,WAC/DvD,WAAW,SAASP,YAAY,EAChCb,SAAUjB,KAAK8E,UAHH9E,KAAK0F,qBAO7B,sBAAKlF,UAAU,oBAAf,UACI,qBAAKC,IAAI,gBAAgBR,MAAO,CAACM,MAAO,IAAKkG,UAAW,IAAK/F,IAAKC,IAAS,qBAC3E,sBAAKH,UAAU,sBAAf,UACI,qBAAKA,UAAU,sBAAf,2BACA,sBAAKA,UAAU,qBAAqBK,QAASb,KAAKoG,gBAAlD,UACI,cAAC,IAAD,CAAO5F,UAAU,yBAAyBoE,KAAM,KAChD,qBAAKpE,UAAU,0BAAf,oCAIZ,qBAAKA,UAAU,mBAAf,SACKR,KAAKX,MAAMyD,UAAY,qBAAK7C,MAAO,CAAC0E,MAAM,SAAnB,oCAEhB3E,KAAKX,MAAM2F,OAAOK,KAAK,SAACjD,EAAO+C,GAAR,OAAkB,cAAC,EAAD,CACzCjE,KAAMkB,EAAMlB,KAAMC,KAAMiB,EAAMjB,KAAMC,IAAKgB,EAAMhB,IAAKsD,SAAUtC,EAAMf,SAAUmD,QAASpC,EAAMoC,QAC7FD,OAAQ,SAACrD,EAAcC,EACnBC,EAAaC,EAAkBmD,GAD3B,OAC+C,EAAKD,OAAOY,EAAOjE,EAAMC,EAAMC,EAAKC,EAAUmD,KAH5CpC,EAAMoC,qB,GA3FhE1D,IAAMC,WCqBlB2F,E,kDAnCb,WAAYtH,EAAiBC,GAAiB,IAAD,8BAC3C,cAAMD,EAAMC,IAMdsH,WAAa,WACX,EAAKpH,SAAS,CACZqH,qBAAqB,KAToB,EAa7CC,YAAc,WACZ,EAAKtH,SAAS,CACZqH,qBAAqB,KAbvB,EAAKvH,MAAQ,CACXuH,qBAAqB,GAHoB,E,0CAmB7C,WACE,OACE,qBAAKpG,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SAEIR,KAAKX,MAAMuH,oBAAsB,cAAC,EAAD,IAAmB,cAAC,EAAD,CAClDhH,eAAgBI,KAAK2G,WACrB5G,SAAUC,KAAK6G,sB,GA3BX/F,IAAMC,WCCT+F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxI,MAAK,YAAkD,IAA/CyI,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCKRO,EAAcC,QACa,cAA7BlL,OAAOmL,SAASC,UAEe,UAA7BpL,OAAOmL,SAASC,UAEhBpL,OAAOmL,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTpJ,MAAK,SAAAyJ,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9I,QACfyI,UAAUC,cAAcO,YAI1BpF,QAAQC,IACN,iHAKE0E,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlB/E,QAAQC,IAAI,sCAGR0E,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BvJ,OAAM,SAAAC,GACLuE,QAAQvE,MAAM,4CAA6CA,MCjGnE8J,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B/B,IDUS,SAAkBe,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIgB,IACpBC,IACA1M,OAAOmL,SAASwB,MAEJC,SAAW5M,OAAOmL,SAASyB,OAIvC,OAGF5M,OAAO6M,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMmB,IAAN,sBAEPzB,IAgEV,SAAiCM,EAAeC,GAE9CsB,MAAMvB,EAAO,CACXwB,QAAS,CAAE,iBAAkB,YAE5B5K,MAAK,SAAA6K,GAEJ,IAAMC,EAAcD,EAASD,QAAQnL,IAAI,gBAEnB,MAApBoL,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C1B,UAAUC,cAAc0B,MAAMjL,MAAK,SAAAyJ,GACjCA,EAAayB,aAAalL,MAAK,WAC7BnC,OAAOmL,SAASmC,eAKpBhC,EAAgBC,EAAOC,MAG1BnJ,OAAM,WACLwE,QAAQC,IACN,oEAvFAyG,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAMjL,MAAK,WACjC0E,QAAQC,IACN,iHAMJwE,EAAgBC,EAAOC,OCxCjCE,K","file":"static/js/main.06a7994a.chunk.js","sourcesContent":["const firebaseConfig = {\r\n    apiKey: \"AIzaSyBe7MCEn-_5jNAd286deOqEk8jvxvNX1aw\",\r\n    authDomain: \"nss-iith-app.firebaseapp.com\",\r\n    projectId: \"nss-iith-app\",\r\n    storageBucket: \"nss-iith-app.appspot.com\",\r\n    messagingSenderId: \"406717518600\",\r\n    appId: \"1:406717518600:web:169bf354467b164f03d2bd\",\r\n    measurementId: \"G-L793C8VNSX\"\r\n};\r\n\r\nexport default firebaseConfig;","import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport firebaseConfig from \"./FirebaseConfig\";\r\n\r\nexport class FirebaseUtils {\r\n\r\n    private static getFirebaseApp = () => {\r\n        if(typeof window !== 'undefined'){\r\n            return firebase.apps.length ? firebase.apps[0] : firebase.initializeApp(firebaseConfig); \r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static initialize_auth = (callback: Function) => {\r\n        const app = FirebaseUtils.getFirebaseApp();\r\n        app?.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\r\n        app?.auth().onAuthStateChanged((user) => {\r\n            if(user){\r\n                callback();\r\n            }\r\n        })\r\n    }\r\n\r\n    public static getUser = () => {\r\n        const app = FirebaseUtils.getFirebaseApp();\r\n        return {\"name\": app?.auth().currentUser?.displayName, \"email\": app?.auth().currentUser?.email};\r\n    }\r\n\r\n    public static isValidTeamMember = async ():Promise<boolean> => {\r\n        try{\r\n            const result = await FirebaseUtils.getPageData(\"access_list\");\r\n            if(result !== {}){\r\n                return true;\r\n            }\r\n        }\r\n        catch{\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static getPageData = async (page: string):Promise<any> => {\r\n        let output: any = {};\r\n        const app = FirebaseUtils.getFirebaseApp();\r\n        const db = app?.firestore().collection(\"event_records\");\r\n        const data = await db?.doc(page).get();\r\n        output = (data) ? data.data() : {};\r\n        return output;\r\n    }\r\n\r\n    public static login = (callback:()=>void, onFail:()=>void) => {\r\n        const app = FirebaseUtils.getFirebaseApp();\r\n        let provider = new firebase.auth.GoogleAuthProvider();\r\n        app?.auth().signInWithPopup(provider).then(function(result) {\r\n            callback();\r\n        }).catch(function(error) {\r\n            alert(error);\r\n            onFail();\r\n        });\r\n    }\r\n\r\n    public static logout = (callback:()=>void) => {\r\n        const app = FirebaseUtils.getFirebaseApp();\r\n        app?.auth().signOut().then(function(result){\r\n            callback();\r\n        }).catch(function(error){alert(\"Oops... failed to logout\")});\r\n    }\r\n\r\n    public static saveChanges = (currentPage:string, page_data:Object) => {\r\n        const app = FirebaseUtils.getFirebaseApp();\r\n        app?.firestore().collection('event_records').doc(currentPage).set(page_data).then(function(result){\r\n            alert(\"Sucessfully saved to database. Thank you!\");\r\n        }).catch(function(error){\r\n            alert(\"Oops... Sorry, unable to save changes. This might have happened because, \\n i) You may not have the edit access to the data \\n ii) You may not have a stable network\");\r\n        })\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport GoogleButton from 'react-google-button'\r\nimport { FirebaseUtils } from \"../../utils/FirebaseUtils\";\r\nimport \"./Login.css\";\r\nimport {homepage} from \"../../../package.json\";\r\n\r\ninterface LoginState{\r\n    isLoggedIn: boolean,\r\n    isValidUser: boolean,\r\n    showMsg: boolean;\r\n    msg: string;\r\n}\r\n\r\ninterface LoginProps{\r\n    onLoginSuccess: Function;\r\n    onLogOut: Function;\r\n}\r\n\r\nclass Login extends React.Component<LoginProps,LoginState>{\r\n    constructor(props: LoginProps, state: LoginState){\r\n        super(props,state);\r\n        FirebaseUtils.initialize_auth(this.onLogin);\r\n        this.state = {\r\n            isLoggedIn: false,\r\n            isValidUser: false,\r\n            showMsg: false,\r\n            msg: \"Currently logged in as \" + FirebaseUtils.getUser().email + \". Verifying access level, Please wait!\"\r\n        }\r\n    }\r\n\r\n    onLogin = async () => {\r\n        const user = FirebaseUtils.getUser().email;\r\n        this.setState({\r\n            isLoggedIn: true,\r\n            showMsg: true,\r\n            msg: \"Verifying user \" + user + \"... Please wait...\"\r\n        });\r\n        const result = await FirebaseUtils.isValidTeamMember();\r\n        if(result){\r\n            this.setState({\r\n                isValidUser: true,\r\n                showMsg: true,\r\n                msg: \"Login and verification success! Please wait...\"\r\n            });\r\n            this.props.onLoginSuccess();\r\n        }\r\n        else{\r\n            this.showMessage(\"Sorry... You do not have access to this page!\");\r\n        }\r\n    }\r\n\r\n    async componentDidMount(){\r\n        if(this.state.isLoggedIn && !this.state.isValidUser){\r\n            this.onLogin();\r\n        }\r\n    }\r\n\r\n    showMessage = (message: string) => {\r\n        this.setState({\r\n            showMsg: true,\r\n            msg: message\r\n        });\r\n    }\r\n\r\n    logout = async () => {\r\n        this.showMessage(\"Please wait...\");\r\n        FirebaseUtils.logout(() => {\r\n            this.setState({\r\n                isLoggedIn: false,\r\n                isValidUser: false,\r\n                showMsg: true,\r\n                msg: \"Logged out!\"\r\n            });\r\n            this.props.onLogOut();\r\n        });\r\n    }\r\n\r\n    login = async () => {\r\n        FirebaseUtils.login(\r\n            async () => {\r\n                this.onLogin();\r\n            },\r\n            () => {\r\n                this.showMessage(\"Oops... login failed. Please check your network connection\")\r\n            }\r\n        );\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div style={{display:\"flex\", flexDirection:\"column\", justifyContent:\"center\", alignItems:\"center\",height:\"100vh\", width:\"100%\"}}>\r\n                <div className=\"loginComponent\">\r\n                    <img alt=\"NSS IITH Logo\" src={homepage+\"/bannerNSS.jpg\"} style={{width: 300}}/>\r\n                    <p className=\"loginTitle\">QR Generator</p>\r\n                    {this.state.isLoggedIn ? <GoogleButton label=\"Log out\" onClick={this.logout}/> : <GoogleButton onClick={this.login}/>}\r\n                    {this.state.showMsg ? <p className=\"loginErrorMsg\">{this.state.msg}</p> : null}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React from \"react\";\r\nimport \"./EventEdit.css\"\r\n\r\ninterface EventEditProps{\r\n    defaultName: string;\r\n    defaultUrl: string;\r\n    defaultDate: string;\r\n    defaultKey: string;\r\n    defaultId: string;\r\n    buttonText: string;\r\n    onSubmit: Function;\r\n    isReadonly: boolean;\r\n}\r\n\r\ninterface EventEditState{\r\n    name: string;\r\n    url: string;\r\n    date: string;\r\n    eventkey: string;\r\n    showMsg: boolean;\r\n}\r\n\r\nclass EventEdit extends React.Component<EventEditProps, EventEditState>{\r\n    constructor(props: EventEditProps, state: EventEditState){\r\n        super(props, state);\r\n        this.state = {\r\n            name: this.props.defaultName,\r\n            date: this.props.defaultDate,\r\n            url: this.props.defaultUrl,\r\n            eventkey: this.props.defaultKey,\r\n            showMsg: false\r\n        }\r\n    }\r\n\r\n    onSubmit = () => {\r\n        if (this.state.name !== \"\" && this.state.date !== \"\" && this.state.url !== \"\" && this.state.eventkey !== \"\"){\r\n            this.setState({\r\n                showMsg: false\r\n            });\r\n            this.props.onSubmit(this.state.name, this.state.date, this.state.url, this.state.eventkey, this.props.defaultId);\r\n        }\r\n        else{\r\n            this.setState({\r\n                showMsg: true\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"eventEditModal\" id={this.props.defaultKey}>\r\n                <div className=\"eventEditModalLabel\">Event Name:</div>\r\n                <textarea id=\"inputname\" className=\"eventEditModalInput\" \r\n                    rows={1} defaultValue={this.props.defaultName} \r\n                    style={this.props.isReadonly ? {border:\"2px solid darkgrey\"}:{border:\"2px solid grey\"}} \r\n                    readOnly={this.props.isReadonly} \r\n                    onChange={(event) => this.setState({name: event.target.value})}></textarea>\r\n                <div className=\"eventEditModalLabel\">Event Date:</div>\r\n                <textarea id=\"inputdate\" className=\"eventEditModalInput\" \r\n                    rows={1} defaultValue={this.props.defaultDate} \r\n                    style={this.props.isReadonly ? {border:\"2px solid darkgrey\"}:{border:\"2px solid grey\"}} \r\n                    readOnly={this.props.isReadonly}\r\n                    onChange={(event) => this.setState({date: event.target.value})}></textarea>\r\n                <div className=\"eventEditModalLabel\">Event Url:</div>\r\n                <textarea id=\"inputurl\" className=\"eventEditModalInput\" \r\n                    rows={6} defaultValue={this.props.defaultUrl} \r\n                    style={this.props.isReadonly ? {border:\"2px solid darkgrey\"}:{border:\"2px solid grey\"}} \r\n                    readOnly={this.props.isReadonly}\r\n                    onChange={(event) => this.setState({url: event.target.value})}></textarea>\r\n                <div className=\"eventEditModalLabel\">Event Id:</div>\r\n                <input id=\"inputkey\" className=\"eventEditModalInput\" \r\n                    defaultValue={this.props.defaultId} \r\n                    style={this.props.isReadonly ? {border:\"2px solid darkgrey\"}:{border:\"2px solid grey\"}} \r\n                    readOnly={true}\r\n                    onChange={()=>{}}></input>\r\n                {!this.props.isReadonly && this.state.showMsg ? <div className=\"eventEditModalMsg\">Please enter all fields!</div>: null}\r\n                {this.props.isReadonly ? null : <div className=\"eventEditButton\" onClick={this.onSubmit}>{this.props.buttonText}</div>}\r\n            </div>\r\n        );\r\n    }\r\n} \r\n\r\nexport default EventEdit;","import React from \"react\";\r\nimport \"./Modal.css\"\r\n\r\ninterface ModalProps{\r\n    showModal: boolean;\r\n}\r\n\r\nclass Modal extends React.Component<ModalProps>{\r\n\r\n    render(){\r\n        const showHideClassName = this.props.showModal ? \"modal display-block\" : \"modal display-none\";\r\n        return(\r\n            <div className={showHideClassName}>\r\n                <section className=\"modal-main\">\r\n                    {this.props.children}\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Modal;","import React from \"react\";\r\nimport { QRCode } from \"react-qr-svg\";\r\nimport \"./QR.css\";\r\nimport {homepage} from \"../../../package.json\";\r\n\r\ninterface QRState{\r\n    time: string;\r\n    isLoading: boolean;\r\n    qrvalue: string;\r\n    worker: Worker;\r\n}\r\n\r\ninterface QRProps{\r\n    eventName: string;\r\n    formUrl: string;\r\n    eventkey: string;\r\n}\r\n\r\nclass QR extends React.Component<QRProps, QRState>{\r\n    static callbackID: NodeJS.Timeout\r\n    constructor(props: QRProps, state: QRState){\r\n        super(props, state);\r\n        this.state = {\r\n            time: new Date().toLocaleString(),\r\n            isLoading: true,\r\n            qrvalue: \"\",\r\n            worker: new Worker(\"web_worker.js\")\r\n        }\r\n    }\r\n\r\n    async componentDidMount(){\r\n        console.log(window.innerHeight);\r\n        this.state.worker.postMessage({\r\n            msg: \"init\",\r\n            Url: this.props.formUrl,\r\n            Name: this.props.eventName,\r\n            Key: this.props.eventkey\r\n        });\r\n        this.state.worker.onmessage = ($event: MessageEvent) => {\r\n            if ($event && $event.data) {\r\n                this.setState({\r\n                    isLoading: false,\r\n                    qrvalue: $event.data,\r\n                    time: new Date().toLocaleString(),\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    async componentWillUnmount(){\r\n        this.state.worker.postMessage({\r\n            msg: \"exit\"\r\n        });\r\n        this.state.worker.terminate();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"QRComponent\">\r\n                <img alt=\"NSS IITH Logo\" className=\"bannerSmall\" style={{width: 300}} src={homepage+\"/bannerSmall.jpg\"}></img>\r\n                <div className=\"eventName\">{\"Event: \" + this.props.eventName}</div>\r\n                <div className=\"QRIcon\">\r\n                    {this.state.isLoading ? null : <QRCode \r\n                        level={\"H\"} className=\"QRCodeImg\"\r\n                        value={this.state.qrvalue}\r\n                    />}\r\n                    <div className=\"bannerNSS\">\r\n                        <img alt=\"NSS IITH Logo\" style={{ width:\"100%\", marginLeft: 20}} src={homepage+\"/bannerNSS.jpg\"}></img>\r\n                    </div>\r\n                </div>\r\n                {this.state.isLoading ? <div className=\"QRLoading\">Loading...</div> : null}\r\n                <p className=\"eventTime\">{\"Date and Time: \" + this.state.time}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QR;","import React from \"react\";\r\nimport EventEdit from \"../event_edit/EventEdit\";\r\nimport Modal from \"../modal/Modal\";\r\nimport \"./EventView.css\";\r\nimport { CgCloseO } from 'react-icons/cg';\r\nimport {IoArrowBack} from 'react-icons/io5';\r\nimport QR from \"../qr/QR\";\r\n\r\ninterface EventState{\r\n    showInfo: boolean;\r\n    isEditable: boolean;\r\n    showQR: boolean;\r\n}\r\n\r\ninterface EventProps{\r\n    name: string;\r\n    url: string;\r\n    eventKey: string;\r\n    date: string;\r\n    eventId: string;\r\n    onEdit: Function;\r\n}\r\n\r\nclass EventView extends React.Component<EventProps, EventState>{\r\n    constructor(props: EventProps, state: EventState){\r\n        super(props,state);\r\n        this.state = {\r\n            showInfo: false,\r\n            isEditable: false,\r\n            showQR: false\r\n        }\r\n    }\r\n\r\n    toggleModalState = () => {\r\n        this.setState({\r\n            showInfo: !this.state.showInfo,\r\n            isEditable: false,\r\n            showQR: false\r\n        });\r\n    }\r\n\r\n    toggleModalEditState = () => {\r\n        this.setState({\r\n            isEditable: !this.state.isEditable\r\n        });\r\n    }\r\n\r\n    onEdit = (name: string, date: string, url: string, eventkey: string, eventId: string) => {\r\n        this.props.onEdit(name, date, url, eventkey, eventId);\r\n        this.toggleModalState();\r\n    }\r\n\r\n    toggleShowQR = () =>{\r\n        console.log(\"toggling\");\r\n        this.setState({\r\n            showQR: !this.state.showQR\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id={this.props.eventKey}>\r\n                <Modal showModal={this.state.showInfo}>\r\n                    <div className=\"eventViewModalClose\" >\r\n                        <CgCloseO color=\"darkred\" size={27} onClick={this.toggleModalState}/>\r\n                        {this.state.isEditable? <IoArrowBack color=\"darkblue\" size={27} onClick={this.toggleModalEditState}/> : null}\r\n                    </div>\r\n                    <EventEdit key={this.props.url+this.props.name+this.props.eventKey} defaultName={this.props.name} \r\n                        defaultDate={this.props.date} defaultUrl={this.props.url} defaultKey={this.props.eventKey}\r\n                        defaultId = {this.props.eventId} onSubmit={this.onEdit} buttonText=\"Save\" \r\n                        isReadonly={!this.state.isEditable}\r\n                    />\r\n                    {this.state.isEditable ? null : <div className=\"eventViewButtonRow\">\r\n                        <div className=\"eventViewButton\" onClick={this.toggleModalEditState}>Edit</div>\r\n                        <div className=\"eventViewButton\" onClick={this.toggleShowQR}>QR Code</div>\r\n                    </div>}\r\n                </Modal>\r\n                <Modal showModal={this.state.showQR}>\r\n                    <div className=\"eventViewQRBox\">\r\n                        <CgCloseO className=\"eventViewQRClose\" size={30} color=\"darkred\" onClick={this.toggleModalState}/>\r\n                        <QR key={this.props.eventKey+this.props.name+this.props.url} eventName={this.props.name} formUrl={this.props.url} eventkey={this.props.eventKey}/>\r\n                    </div>\r\n                </Modal>\r\n                \r\n                <div className=\"eventViewBox\" onClick={this.toggleModalState}>\r\n                    <p className=\"eventViewTitle\" onClick={this.toggleModalState}>{this.props.name}</p>\r\n                    <p className=\"eventViewDate\" onClick={this.toggleModalState}>{this.props.date}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EventView;","import React from \"react\";\r\nimport { FirebaseUtils } from \"../../utils/FirebaseUtils\";\r\nimport EventView from \"../event_view/EventView\";\r\nimport './EventsRecord.css';\r\nimport {CgAdd, CgCloseO} from \"react-icons/cg\";\r\nimport EventEdit from \"../event_edit/EventEdit\";\r\nimport Modal from \"../modal/Modal\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {homepage} from \"../../../package.json\";\r\n\r\ninterface EventModel{\r\n    name: string;\r\n    url: string;\r\n    date: string;\r\n    eventkey: string;\r\n    eventId: string;\r\n}\r\n\r\ninterface EventsRecordState{\r\n    events: EventModel[];\r\n    isLoading: boolean;\r\n    createNew: boolean;\r\n}\r\n\r\ninterface EventsRecordProps{}\r\n\r\nclass EventsRecord extends React.Component<EventsRecordProps, EventsRecordState>{\r\n    constructor(props: EventsRecordProps, state: EventsRecordState){\r\n        super(props, state);\r\n        this.state = {\r\n            events: [],\r\n            isLoading: true,\r\n            createNew: false\r\n        }\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const body = await FirebaseUtils.getPageData(\"events\") as {details: EventModel[]};\r\n        this.setState({\r\n            events: body.details,\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    onCreate = (name: string, date: string, url: string, eventkey: string, eventId: string)  => {\r\n        const newEvent: EventModel = {\r\n            name: name,\r\n            date: date,\r\n            url: url,\r\n            eventkey: eventkey,\r\n            eventId: eventId\r\n        }\r\n        this.state.events.unshift(newEvent);\r\n        FirebaseUtils.saveChanges(\"events\",{\"details\": this.state.events});\r\n        this.setState({\r\n            createNew: false\r\n        });\r\n    }\r\n\r\n    onEdit = (index: number, name: string, date: string, url: string, eventkey: string, eventId: string) => {\r\n        const newEvent: EventModel = {\r\n            name,\r\n            date,\r\n            url,\r\n            eventkey,\r\n            eventId\r\n        }\r\n        const newEvents = this.state.events.map((val) => JSON.parse(JSON.stringify(val)))\r\n        newEvents[index] = newEvent\r\n        this.setState({\r\n            events: newEvents\r\n        });\r\n        FirebaseUtils.saveChanges(\"events\",{\"details\": newEvents});\r\n    }\r\n\r\n    getRandomKey = ():string => {\r\n        return uuidv4();\r\n    }\r\n\r\n    getNewId = ():string => {\r\n        let ts = new Date();\r\n        const months = ['JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC']\r\n        return ts.getDate() + \"-\" + months[ts.getMonth()] + \"-\" + ts.getFullYear() + \"-\" + ts.getHours() + \"-\" + ts.getMinutes() + \"-\" + ts.getSeconds()\r\n    }\r\n\r\n    toggleCreateNew = () =>{\r\n        this.setState({\r\n            createNew: !this.state.createNew\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"eventsRecordPage\">\r\n                <Modal showModal={this.state.createNew}>\r\n                    <div className=\"eventsRecordCreateNew\">\r\n                        <CgCloseO color=\"darkred\" size={27} style={{alignSelf:\"flex-end\", marginRight:\"10px\", marginTop:\"5px\"}} onClick={this.toggleCreateNew}/>\r\n                        <EventEdit key={this.getRandomKey()} defaultDate=\"\" defaultName=\"\" \r\n                            defaultUrl=\"\" defaultKey={this.getRandomKey()} defaultId={this.getNewId()}\r\n                            buttonText=\"Create\" isReadonly={false} \r\n                            onSubmit={this.onCreate}\r\n                        />\r\n                    </div>\r\n                </Modal>\r\n                <div className=\"eventsRecordTitle\">\r\n                    <img alt=\"NSS IITH Logo\" style={{width: 320, marginTop: 15}} src={homepage+\"/bannerSmall.jpg\"}/>\r\n                    <div className=\"eventsRecordHeadRow\">\r\n                        <div className=\"eventsRecordHeading\">Events Record</div>\r\n                        <div className=\"eventsRecordAddNew\" onClick={this.toggleCreateNew}>\r\n                            <CgAdd className=\"eventsRecordAddNewIcon\" size={22}/>\r\n                            <div className=\"eventsRecordAddNewTitle\">Add New Event</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"eventsRecordGrid\">\r\n                    {this.state.isLoading ? <div style={{color:\"black\"}}>\r\n                        Loading please wait...\r\n                    </div>: this.state.events.map( (value, index) => <EventView key={value.eventId}\r\n                            name={value.name} date={value.date} url={value.url} eventKey={value.eventkey} eventId={value.eventId}\r\n                            onEdit={(name: string, date: string, \r\n                                url: string, eventkey: string, eventId: string) => this.onEdit(index, name, date, url, eventkey, eventId)}/>\r\n                        )\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EventsRecord;","import './App.css';\r\nimport React from 'react';\r\nimport Login from './components/login/Login';\r\nimport EventsRecord from './components/events_record/EventsRecord';\r\n\r\ninterface AppState{\r\n  isValidUserLoggedIn: boolean;\r\n}\r\n\r\ninterface AppProps{}\r\n\r\nclass App extends React.Component<AppProps, AppState>{\r\n  constructor(props: AppProps, state: AppState){\r\n    super(props,state);\r\n    this.state = {\r\n      isValidUserLoggedIn: false\r\n    }\r\n  }\r\n\r\n  onLoggedIn = () => {\r\n    this.setState({\r\n      isValidUserLoggedIn: true\r\n    });\r\n  }\r\n\r\n  onLoggedOut = () => {\r\n    this.setState({\r\n      isValidUserLoggedIn: false\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          {\r\n            this.state.isValidUserLoggedIn ? <EventsRecord /> : <Login \r\n              onLoginSuccess={this.onLoggedIn}\r\n              onLogOut={this.onLoggedOut}\r\n            />\r\n          }\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  type Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n  };\r\n  \r\n  export function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(\r\n        process.env.PUBLIC_URL,\r\n        window.location.href\r\n      );\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' }\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\nserviceWorker.register();\r\n"],"sourceRoot":""}